/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CompaniesCreateCompanyRequestCompanyAddressesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompaniesCreateCompanyRequestCompany
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompaniesCreateCompanyRequestCompany {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRADE_NAME = "trade_name";
  @SerializedName(SERIALIZED_NAME_TRADE_NAME)
  private String tradeName;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<String> states = null;

  public static final String SERIALIZED_NAME_NUMBER_EMPLOYEES = "number_employees";
  @SerializedName(SERIALIZED_NAME_NUMBER_EMPLOYEES)
  private Double numberEmployees;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<CompaniesCreateCompanyRequestCompanyAddressesInner> addresses = null;

  public CompaniesCreateCompanyRequestCompany() {
  }

  public CompaniesCreateCompanyRequestCompany name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The legal name of the company.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The legal name of the company.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CompaniesCreateCompanyRequestCompany tradeName(String tradeName) {
    
    
    
    
    this.tradeName = tradeName;
    return this;
  }

   /**
   * The name of the company.
   * @return tradeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the company.")

  public String getTradeName() {
    return tradeName;
  }


  public void setTradeName(String tradeName) {
    
    
    
    this.tradeName = tradeName;
  }


  public CompaniesCreateCompanyRequestCompany ein(String ein) {
    
    
    
    
    this.ein = ein;
    return this;
  }

   /**
   * The employer identification number (EIN) of the company.
   * @return ein
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The employer identification number (EIN) of the company.")

  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    
    
    
    this.ein = ein;
  }


  public CompaniesCreateCompanyRequestCompany states(List<String> states) {
    
    
    
    
    this.states = states;
    return this;
  }

  public CompaniesCreateCompanyRequestCompany addStatesItem(String statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * The states in which the company operates. States should be included by their two letter code, i.e. NY for New York. 
   * @return states
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The states in which the company operates. States should be included by their two letter code, i.e. NY for New York. ")

  public List<String> getStates() {
    return states;
  }


  public void setStates(List<String> states) {
    
    
    
    this.states = states;
  }


  public CompaniesCreateCompanyRequestCompany numberEmployees(Double numberEmployees) {
    
    
    
    
    this.numberEmployees = numberEmployees;
    return this;
  }

  public CompaniesCreateCompanyRequestCompany numberEmployees(Integer numberEmployees) {
    
    
    
    
    this.numberEmployees = numberEmployees.doubleValue();
    return this;
  }

   /**
   * The number of employees in the company.
   * @return numberEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of employees in the company.")

  public Double getNumberEmployees() {
    return numberEmployees;
  }


  public void setNumberEmployees(Double numberEmployees) {
    
    
    
    this.numberEmployees = numberEmployees;
  }


  public CompaniesCreateCompanyRequestCompany addresses(List<CompaniesCreateCompanyRequestCompanyAddressesInner> addresses) {
    
    
    
    
    this.addresses = addresses;
    return this;
  }

  public CompaniesCreateCompanyRequestCompany addAddressesItem(CompaniesCreateCompanyRequestCompanyAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * The locations for the company. This includes mailing, work, and filing addresses.
   * @return addresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The locations for the company. This includes mailing, work, and filing addresses.")

  public List<CompaniesCreateCompanyRequestCompanyAddressesInner> getAddresses() {
    return addresses;
  }


  public void setAddresses(List<CompaniesCreateCompanyRequestCompanyAddressesInner> addresses) {
    
    
    
    this.addresses = addresses;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompaniesCreateCompanyRequestCompany instance itself
   */
  public CompaniesCreateCompanyRequestCompany putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompaniesCreateCompanyRequestCompany companiesCreateCompanyRequestCompany = (CompaniesCreateCompanyRequestCompany) o;
    return Objects.equals(this.name, companiesCreateCompanyRequestCompany.name) &&
        Objects.equals(this.tradeName, companiesCreateCompanyRequestCompany.tradeName) &&
        Objects.equals(this.ein, companiesCreateCompanyRequestCompany.ein) &&
        Objects.equals(this.states, companiesCreateCompanyRequestCompany.states) &&
        Objects.equals(this.numberEmployees, companiesCreateCompanyRequestCompany.numberEmployees) &&
        Objects.equals(this.addresses, companiesCreateCompanyRequestCompany.addresses)&&
        Objects.equals(this.additionalProperties, companiesCreateCompanyRequestCompany.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, tradeName, ein, states, numberEmployees, addresses, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompaniesCreateCompanyRequestCompany {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tradeName: ").append(toIndentedString(tradeName)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    numberEmployees: ").append(toIndentedString(numberEmployees)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("trade_name");
    openapiFields.add("ein");
    openapiFields.add("states");
    openapiFields.add("number_employees");
    openapiFields.add("addresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompaniesCreateCompanyRequestCompany
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompaniesCreateCompanyRequestCompany.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompaniesCreateCompanyRequestCompany is not found in the empty JSON string", CompaniesCreateCompanyRequestCompany.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompaniesCreateCompanyRequestCompany.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("trade_name") != null && !jsonObj.get("trade_name").isJsonNull()) && !jsonObj.get("trade_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trade_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trade_name").toString()));
      }
      if ((jsonObj.get("ein") != null && !jsonObj.get("ein").isJsonNull()) && !jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            CompaniesCreateCompanyRequestCompanyAddressesInner.validateJsonObject(jsonArrayaddresses.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompaniesCreateCompanyRequestCompany.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompaniesCreateCompanyRequestCompany' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompaniesCreateCompanyRequestCompany> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompaniesCreateCompanyRequestCompany.class));

       return (TypeAdapter<T>) new TypeAdapter<CompaniesCreateCompanyRequestCompany>() {
           @Override
           public void write(JsonWriter out, CompaniesCreateCompanyRequestCompany value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompaniesCreateCompanyRequestCompany read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompaniesCreateCompanyRequestCompany instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompaniesCreateCompanyRequestCompany given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompaniesCreateCompanyRequestCompany
  * @throws IOException if the JSON string is invalid with respect to CompaniesCreateCompanyRequestCompany
  */
  public static CompaniesCreateCompanyRequestCompany fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompaniesCreateCompanyRequestCompany.class);
  }

 /**
  * Convert an instance of CompaniesCreateCompanyRequestCompany to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

