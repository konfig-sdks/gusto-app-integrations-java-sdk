/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayPeriod;
import com.konfigthis.client.model.PaySchedule;
import com.konfigthis.client.model.PayScheduleAssignment;
import com.konfigthis.client.model.UnprocessedTerminationPayPeriod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaySchedulesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaySchedulesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaySchedulesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssignmentsCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentsValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAssignments(Async)");
        }

        return getAssignmentsCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayScheduleAssignment> getAssignmentsWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentsValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayScheduleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentsAsync(String companyId, String xGustoAPIVersion, final ApiCallback<PayScheduleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentsValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayScheduleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentsRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private GetAssignmentsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAssignmentsRequestBuilder
         */
        public GetAssignmentsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentsCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAssignments request
         * @return PayScheduleAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayScheduleAssignment execute() throws ApiException {
            ApiResponse<PayScheduleAssignment> localVarResp = getAssignmentsWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignments request with HTTP info returned
         * @return ApiResponse&lt;PayScheduleAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayScheduleAssignment> executeWithHttpInfo() throws ApiException {
            return getAssignmentsWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute getAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayScheduleAssignment> _callback) throws ApiException {
            return getAssignmentsAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get pay schedule assignments for a company
     * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentsRequestBuilder getAssignments(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAssignmentsRequestBuilder(companyId);
    }
    private okhttp3.Call getDetailsCall(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "pay_schedule_id" + "}", localVarApiClient.escapeString(payScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDetails(Async)");
        }

        // verify the required parameter 'payScheduleId' is set
        if (payScheduleId == null) {
            throw new ApiException("Missing the required parameter 'payScheduleId' when calling getDetails(Async)");
        }

        return getDetailsCall(companyId, payScheduleId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PaySchedule> getDetailsWithHttpInfo(String companyId, String payScheduleId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyId, String payScheduleId, String xGustoAPIVersion, final ApiCallback<PaySchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, payScheduleId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PaySchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String companyId;
        private final String payScheduleId;
        private String xGustoAPIVersion;

        private GetDetailsRequestBuilder(String companyId, String payScheduleId) {
            this.companyId = companyId;
            this.payScheduleId = payScheduleId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyId, payScheduleId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getDetails request
         * @return PaySchedule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PaySchedule execute() throws ApiException {
            ApiResponse<PaySchedule> localVarResp = getDetailsWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaySchedule> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyId, payScheduleId, xGustoAPIVersion);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaySchedule> _callback) throws ApiException {
            return getDetailsAsync(companyId, payScheduleId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a pay schedule
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param payScheduleId The UUID of the pay schedule (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String companyId, String payScheduleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payScheduleId == null) throw new IllegalArgumentException("\"payScheduleId\" is required but got null");
            

        return new GetDetailsRequestBuilder(companyId, payScheduleId);
    }
    private okhttp3.Call listCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_schedules"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PaySchedule>> listWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PaySchedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<PaySchedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PaySchedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private ListRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;PaySchedule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PaySchedule> execute() throws ApiException {
            ApiResponse<List<PaySchedule>> localVarResp = listWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaySchedule&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaySchedule>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaySchedule>> _callback) throws ApiException {
            return listAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get the pay schedules for a company
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: &#x60;pay_schedules:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call listUnprocessedTerminationPayPeriodsCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUnprocessedTerminationPayPeriodsValidateBeforeCall(String companyId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listUnprocessedTerminationPayPeriods(Async)");
        }

        return listUnprocessedTerminationPayPeriodsCall(companyId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<UnprocessedTerminationPayPeriod>> listUnprocessedTerminationPayPeriodsWithHttpInfo(String companyId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listUnprocessedTerminationPayPeriodsValidateBeforeCall(companyId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<UnprocessedTerminationPayPeriod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUnprocessedTerminationPayPeriodsAsync(String companyId, String xGustoAPIVersion, final ApiCallback<List<UnprocessedTerminationPayPeriod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUnprocessedTerminationPayPeriodsValidateBeforeCall(companyId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<UnprocessedTerminationPayPeriod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUnprocessedTerminationPayPeriodsRequestBuilder {
        private final String companyId;
        private String xGustoAPIVersion;

        private ListUnprocessedTerminationPayPeriodsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListUnprocessedTerminationPayPeriodsRequestBuilder
         */
        public ListUnprocessedTerminationPayPeriodsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listUnprocessedTerminationPayPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUnprocessedTerminationPayPeriodsCall(companyId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listUnprocessedTerminationPayPeriods request
         * @return List&lt;UnprocessedTerminationPayPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<UnprocessedTerminationPayPeriod> execute() throws ApiException {
            ApiResponse<List<UnprocessedTerminationPayPeriod>> localVarResp = listUnprocessedTerminationPayPeriodsWithHttpInfo(companyId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUnprocessedTerminationPayPeriods request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UnprocessedTerminationPayPeriod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UnprocessedTerminationPayPeriod>> executeWithHttpInfo() throws ApiException {
            return listUnprocessedTerminationPayPeriodsWithHttpInfo(companyId, xGustoAPIVersion);
        }

        /**
         * Execute listUnprocessedTerminationPayPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UnprocessedTerminationPayPeriod>> _callback) throws ApiException {
            return listUnprocessedTerminationPayPeriodsAsync(companyId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get termination pay periods for a company
     * When a payroll admin terminates an employee and selects \&quot;Dismissal Payroll\&quot; as the employee&#39;s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return ListUnprocessedTerminationPayPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListUnprocessedTerminationPayPeriodsRequestBuilder listUnprocessedTerminationPayPeriods(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListUnprocessedTerminationPayPeriodsRequestBuilder(companyId);
    }
    private okhttp3.Call list_0Call(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/pay_periods"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (payrollTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payroll_types", payrollTypes));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_0ValidateBeforeCall(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list_0(Async)");
        }

        return list_0Call(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PayPeriod>> list_0WithHttpInfo(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = list_0ValidateBeforeCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PayPeriod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_0Async(String companyId, String startDate, String endDate, String payrollTypes, String xGustoAPIVersion, final ApiCallback<List<PayPeriod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_0ValidateBeforeCall(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PayPeriod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List0RequestBuilder {
        private final String companyId;
        private String startDate;
        private String endDate;
        private String payrollTypes;
        private String xGustoAPIVersion;

        private List0RequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set startDate
         * @param startDate  (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set payrollTypes
         * @param payrollTypes regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder payrollTypes(String payrollTypes) {
            this.payrollTypes = payrollTypes;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for list_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_0Call(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        }


        /**
         * Execute list_0 request
         * @return List&lt;PayPeriod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PayPeriod> execute() throws ApiException {
            ApiResponse<List<PayPeriod>> localVarResp = list_0WithHttpInfo(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayPeriod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayPeriod>> executeWithHttpInfo() throws ApiException {
            return list_0WithHttpInfo(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion);
        }

        /**
         * Execute list_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayPeriod>> _callback) throws ApiException {
            return list_0Async(companyId, startDate, endDate, payrollTypes, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get pay periods for a company
     * Pay periods are the foundation of payroll. Compensation, time &amp; attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version &#39;2023-04-01&#39;, the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return List0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public List0RequestBuilder list_0(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new List0RequestBuilder(companyId);
    }
}
