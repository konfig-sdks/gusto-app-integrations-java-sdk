/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Department;
import com.konfigthis.client.model.DepartmentsAddPeopleToDepartmentRequest;
import com.konfigthis.client.model.DepartmentsAddPeopleToDepartmentRequestEmployeesInner;
import com.konfigthis.client.model.DepartmentsCreateDepartmentRequest;
import com.konfigthis.client.model.DepartmentsRemoveEmployeesRequest;
import com.konfigthis.client.model.DepartmentsUpdateDepartmentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPeopleToDepartmentCall(String departmentUuid, String xGustoAPIVersion, DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsAddPeopleToDepartmentRequest;

        // create path and map variables
        String localVarPath = "/v1/departments/{department_uuid}/add"
            .replace("{" + "department_uuid" + "}", localVarApiClient.escapeString(departmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPeopleToDepartmentValidateBeforeCall(String departmentUuid, String xGustoAPIVersion, DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUuid' is set
        if (departmentUuid == null) {
            throw new ApiException("Missing the required parameter 'departmentUuid' when calling addPeopleToDepartment(Async)");
        }

        return addPeopleToDepartmentCall(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest, _callback);

    }


    private ApiResponse<Department> addPeopleToDepartmentWithHttpInfo(String departmentUuid, String xGustoAPIVersion, DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest) throws ApiException {
        okhttp3.Call localVarCall = addPeopleToDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPeopleToDepartmentAsync(String departmentUuid, String xGustoAPIVersion, DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPeopleToDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPeopleToDepartmentRequestBuilder {
        private final String departmentUuid;
        private String version;
        private List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> employees;
        private List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> contractors;
        private String xGustoAPIVersion;

        private AddPeopleToDepartmentRequestBuilder(String departmentUuid) {
            this.departmentUuid = departmentUuid;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. (optional)
         * @return AddPeopleToDepartmentRequestBuilder
         */
        public AddPeopleToDepartmentRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set employees
         * @param employees Array of employees to add to the department (optional)
         * @return AddPeopleToDepartmentRequestBuilder
         */
        public AddPeopleToDepartmentRequestBuilder employees(List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set contractors
         * @param contractors Array of contractors to add to the department (optional)
         * @return AddPeopleToDepartmentRequestBuilder
         */
        public AddPeopleToDepartmentRequestBuilder contractors(List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> contractors) {
            this.contractors = contractors;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return AddPeopleToDepartmentRequestBuilder
         */
        public AddPeopleToDepartmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for addPeopleToDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest = buildBodyParams();
            return addPeopleToDepartmentCall(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest, _callback);
        }

        private DepartmentsAddPeopleToDepartmentRequest buildBodyParams() {
            DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest = new DepartmentsAddPeopleToDepartmentRequest();
            departmentsAddPeopleToDepartmentRequest.version(this.version);
            departmentsAddPeopleToDepartmentRequest.employees(this.employees);
            departmentsAddPeopleToDepartmentRequest.contractors(this.contractors);
            return departmentsAddPeopleToDepartmentRequest;
        }

        /**
         * Execute addPeopleToDepartment request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest = buildBodyParams();
            ApiResponse<Department> localVarResp = addPeopleToDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPeopleToDepartment request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest = buildBodyParams();
            return addPeopleToDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest);
        }

        /**
         * Execute addPeopleToDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            DepartmentsAddPeopleToDepartmentRequest departmentsAddPeopleToDepartmentRequest = buildBodyParams();
            return addPeopleToDepartmentAsync(departmentUuid, xGustoAPIVersion, departmentsAddPeopleToDepartmentRequest, _callback);
        }
    }

    /**
     * Add people to a department
     * Add employees and contractors to a department  scope: &#x60;departments:write&#x60; 
     * @param departmentUuid The UUID of the department (required)
     * @return AddPeopleToDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public AddPeopleToDepartmentRequestBuilder addPeopleToDepartment(String departmentUuid) throws IllegalArgumentException {
        if (departmentUuid == null) throw new IllegalArgumentException("\"departmentUuid\" is required but got null");
            

        return new AddPeopleToDepartmentRequestBuilder(departmentUuid);
    }
    private okhttp3.Call createDepartmentCall(String companyUuid, String xGustoAPIVersion, DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsCreateDepartmentRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/departments"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDepartmentValidateBeforeCall(String companyUuid, String xGustoAPIVersion, DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling createDepartment(Async)");
        }

        return createDepartmentCall(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest, _callback);

    }


    private ApiResponse<Department> createDepartmentWithHttpInfo(String companyUuid, String xGustoAPIVersion, DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createDepartmentValidateBeforeCall(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDepartmentAsync(String companyUuid, String xGustoAPIVersion, DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDepartmentValidateBeforeCall(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDepartmentRequestBuilder {
        private final String companyUuid;
        private String title;
        private String xGustoAPIVersion;

        private CreateDepartmentRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return CreateDepartmentRequestBuilder
         */
        public CreateDepartmentRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateDepartmentRequestBuilder
         */
        public CreateDepartmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest = buildBodyParams();
            return createDepartmentCall(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest, _callback);
        }

        private DepartmentsCreateDepartmentRequest buildBodyParams() {
            DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest = new DepartmentsCreateDepartmentRequest();
            departmentsCreateDepartmentRequest.title(this.title);
            return departmentsCreateDepartmentRequest;
        }

        /**
         * Execute createDepartment request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest = buildBodyParams();
            ApiResponse<Department> localVarResp = createDepartmentWithHttpInfo(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDepartment request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest = buildBodyParams();
            return createDepartmentWithHttpInfo(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest);
        }

        /**
         * Execute createDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            DepartmentsCreateDepartmentRequest departmentsCreateDepartmentRequest = buildBodyParams();
            return createDepartmentAsync(companyUuid, xGustoAPIVersion, departmentsCreateDepartmentRequest, _callback);
        }
    }

    /**
     * Create a department
     * Create a department  scope: &#x60;departments:write&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return CreateDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Department Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateDepartmentRequestBuilder createDepartment(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new CreateDepartmentRequestBuilder(companyUuid);
    }
    private okhttp3.Call deleteDepartmentCall(String departmentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{department_uuid}"
            .replace("{" + "department_uuid" + "}", localVarApiClient.escapeString(departmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDepartmentValidateBeforeCall(String departmentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUuid' is set
        if (departmentUuid == null) {
            throw new ApiException("Missing the required parameter 'departmentUuid' when calling deleteDepartment(Async)");
        }

        return deleteDepartmentCall(departmentUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteDepartmentWithHttpInfo(String departmentUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDepartmentAsync(String departmentUuid, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDepartmentRequestBuilder {
        private final String departmentUuid;
        private String xGustoAPIVersion;

        private DeleteDepartmentRequestBuilder(String departmentUuid) {
            this.departmentUuid = departmentUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteDepartmentRequestBuilder
         */
        public DeleteDepartmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDepartmentCall(departmentUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteDepartment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteDepartment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion);
        }

        /**
         * Execute deleteDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDepartmentAsync(departmentUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a department
     * Delete a department. You cannot delete a department until all employees and contractors have been removed.  scope: &#x60;departments:write&#x60; 
     * @param departmentUuid The UUID of the department (required)
     * @return DeleteDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDepartmentRequestBuilder deleteDepartment(String departmentUuid) throws IllegalArgumentException {
        if (departmentUuid == null) throw new IllegalArgumentException("\"departmentUuid\" is required but got null");
            

        return new DeleteDepartmentRequestBuilder(departmentUuid);
    }
    private okhttp3.Call getByUuidCall(String departmentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{department_uuid}"
            .replace("{" + "department_uuid" + "}", localVarApiClient.escapeString(departmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUuidValidateBeforeCall(String departmentUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUuid' is set
        if (departmentUuid == null) {
            throw new ApiException("Missing the required parameter 'departmentUuid' when calling getByUuid(Async)");
        }

        return getByUuidCall(departmentUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Department> getByUuidWithHttpInfo(String departmentUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByUuidValidateBeforeCall(departmentUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUuidAsync(String departmentUuid, String xGustoAPIVersion, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUuidValidateBeforeCall(departmentUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUuidRequestBuilder {
        private final String departmentUuid;
        private String xGustoAPIVersion;

        private GetByUuidRequestBuilder(String departmentUuid) {
            this.departmentUuid = departmentUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByUuidRequestBuilder
         */
        public GetByUuidRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getByUuid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUuidCall(departmentUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getByUuid request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            ApiResponse<Department> localVarResp = getByUuidWithHttpInfo(departmentUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUuid request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            return getByUuidWithHttpInfo(departmentUuid, xGustoAPIVersion);
        }

        /**
         * Execute getByUuid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            return getByUuidAsync(departmentUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a department
     * Get a department given the UUID  scope: &#x60;departments:read&#x60; 
     * @param departmentUuid The UUID of the department (required)
     * @return GetByUuidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByUuidRequestBuilder getByUuid(String departmentUuid) throws IllegalArgumentException {
        if (departmentUuid == null) throw new IllegalArgumentException("\"departmentUuid\" is required but got null");
            

        return new GetByUuidRequestBuilder(departmentUuid);
    }
    private okhttp3.Call listForCompanyCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_uuid}/departments"
            .replace("{" + "company_uuid" + "}", localVarApiClient.escapeString(companyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForCompanyValidateBeforeCall(String companyUuid, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyUuid' is set
        if (companyUuid == null) {
            throw new ApiException("Missing the required parameter 'companyUuid' when calling listForCompany(Async)");
        }

        return listForCompanyCall(companyUuid, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Department>> listForCompanyWithHttpInfo(String companyUuid, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyUuid, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Department>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForCompanyAsync(String companyUuid, String xGustoAPIVersion, final ApiCallback<List<Department>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForCompanyValidateBeforeCall(companyUuid, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Department>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForCompanyRequestBuilder {
        private final String companyUuid;
        private String xGustoAPIVersion;

        private ListForCompanyRequestBuilder(String companyUuid) {
            this.companyUuid = companyUuid;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return ListForCompanyRequestBuilder
         */
        public ListForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for listForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForCompanyCall(companyUuid, xGustoAPIVersion, _callback);
        }


        /**
         * Execute listForCompany request
         * @return List&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Department> execute() throws ApiException {
            ApiResponse<List<Department>> localVarResp = listForCompanyWithHttpInfo(companyUuid, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Department&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Department>> executeWithHttpInfo() throws ApiException {
            return listForCompanyWithHttpInfo(companyUuid, xGustoAPIVersion);
        }

        /**
         * Execute listForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Department>> _callback) throws ApiException {
            return listForCompanyAsync(companyUuid, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all departments of a company
     * Get all of the departments for a given company with the employees and contractors assigned to that department.  scope: &#x60;departments:read&#x60;
     * @param companyUuid The UUID of the company (required)
     * @return ListForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of departments </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public ListForCompanyRequestBuilder listForCompany(String companyUuid) throws IllegalArgumentException {
        if (companyUuid == null) throw new IllegalArgumentException("\"companyUuid\" is required but got null");
            

        return new ListForCompanyRequestBuilder(companyUuid);
    }
    private okhttp3.Call removeEmployeesCall(String departmentUuid, String xGustoAPIVersion, DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsRemoveEmployeesRequest;

        // create path and map variables
        String localVarPath = "/v1/departments/{department_uuid}/remove"
            .replace("{" + "department_uuid" + "}", localVarApiClient.escapeString(departmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmployeesValidateBeforeCall(String departmentUuid, String xGustoAPIVersion, DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUuid' is set
        if (departmentUuid == null) {
            throw new ApiException("Missing the required parameter 'departmentUuid' when calling removeEmployees(Async)");
        }

        return removeEmployeesCall(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest, _callback);

    }


    private ApiResponse<Department> removeEmployeesWithHttpInfo(String departmentUuid, String xGustoAPIVersion, DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEmployeesAsync(String departmentUuid, String xGustoAPIVersion, DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmployeesValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEmployeesRequestBuilder {
        private final String departmentUuid;
        private String version;
        private List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> employees;
        private List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> contractors;
        private String xGustoAPIVersion;

        private RemoveEmployeesRequestBuilder(String departmentUuid) {
            this.departmentUuid = departmentUuid;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set employees
         * @param employees Array of employees to remove from a department (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder employees(List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set contractors
         * @param contractors Array of contractors to remove from a department (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder contractors(List<DepartmentsAddPeopleToDepartmentRequestEmployeesInner> contractors) {
            this.contractors = contractors;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveEmployeesRequestBuilder
         */
        public RemoveEmployeesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesCall(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest, _callback);
        }

        private DepartmentsRemoveEmployeesRequest buildBodyParams() {
            DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest = new DepartmentsRemoveEmployeesRequest();
            departmentsRemoveEmployeesRequest.version(this.version);
            departmentsRemoveEmployeesRequest.employees(this.employees);
            departmentsRemoveEmployeesRequest.contractors(this.contractors);
            return departmentsRemoveEmployeesRequest;
        }

        /**
         * Execute removeEmployees request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest = buildBodyParams();
            ApiResponse<Department> localVarResp = removeEmployeesWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEmployees request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest);
        }

        /**
         * Execute removeEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            DepartmentsRemoveEmployeesRequest departmentsRemoveEmployeesRequest = buildBodyParams();
            return removeEmployeesAsync(departmentUuid, xGustoAPIVersion, departmentsRemoveEmployeesRequest, _callback);
        }
    }

    /**
     * Remove people from a department
     * Remove employees and contractors from a department  scope: &#x60;departments:write&#x60; 
     * @param departmentUuid The UUID of the department (required)
     * @return RemoveEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmployeesRequestBuilder removeEmployees(String departmentUuid) throws IllegalArgumentException {
        if (departmentUuid == null) throw new IllegalArgumentException("\"departmentUuid\" is required but got null");
            

        return new RemoveEmployeesRequestBuilder(departmentUuid);
    }
    private okhttp3.Call updateDepartmentCall(String departmentUuid, String xGustoAPIVersion, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsUpdateDepartmentRequest;

        // create path and map variables
        String localVarPath = "/v1/departments/{department_uuid}"
            .replace("{" + "department_uuid" + "}", localVarApiClient.escapeString(departmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDepartmentValidateBeforeCall(String departmentUuid, String xGustoAPIVersion, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUuid' is set
        if (departmentUuid == null) {
            throw new ApiException("Missing the required parameter 'departmentUuid' when calling updateDepartment(Async)");
        }

        return updateDepartmentCall(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest, _callback);

    }


    private ApiResponse<Department> updateDepartmentWithHttpInfo(String departmentUuid, String xGustoAPIVersion, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDepartmentAsync(String departmentUuid, String xGustoAPIVersion, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDepartmentRequestBuilder {
        private final String version;
        private final String departmentUuid;
        private String title;
        private String xGustoAPIVersion;

        private UpdateDepartmentRequestBuilder(String version, String departmentUuid) {
            this.version = version;
            this.departmentUuid = departmentUuid;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdateDepartmentRequestBuilder
         */
        public UpdateDepartmentRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateDepartmentRequestBuilder
         */
        public UpdateDepartmentRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentCall(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest, _callback);
        }

        private DepartmentsUpdateDepartmentRequest buildBodyParams() {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = new DepartmentsUpdateDepartmentRequest();
            departmentsUpdateDepartmentRequest.title(this.title);
            departmentsUpdateDepartmentRequest.version(this.version);
            return departmentsUpdateDepartmentRequest;
        }

        /**
         * Execute updateDepartment request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            ApiResponse<Department> localVarResp = updateDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDepartment request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentWithHttpInfo(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest);
        }

        /**
         * Execute updateDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentAsync(departmentUuid, xGustoAPIVersion, departmentsUpdateDepartmentRequest, _callback);
        }
    }

    /**
     * Update a department
     * Update a department  scope: &#x60;departments:write&#x60;
     * @param departmentUuid The UUID of the department (required)
     * @return UpdateDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Department Object Example </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDepartmentRequestBuilder updateDepartment(String version, String departmentUuid) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (departmentUuid == null) throw new IllegalArgumentException("\"departmentUuid\" is required but got null");
            

        return new UpdateDepartmentRequestBuilder(version, departmentUuid);
    }
}
