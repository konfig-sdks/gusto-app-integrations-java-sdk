/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Payroll;
import com.konfigthis.client.model.PayrollMinimal;
import com.konfigthis.client.model.PayrollPrepared;
import com.konfigthis.client.model.PayrollsUpdateByIdRequest;
import com.konfigthis.client.model.PayrollsUpdateByIdRequestEmployeeCompensationsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllForCompanyCall(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processingStatuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processing_statuses", processingStatuses));
        }

        if (payrollTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payroll_types", payrollTypes));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForCompanyValidateBeforeCall(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAllForCompany(Async)");
        }

        return getAllForCompanyCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<PayrollMinimal>> getAllForCompanyWithHttpInfo(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllForCompanyValidateBeforeCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<PayrollMinimal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForCompanyAsync(String companyId, String processingStatuses, String payrollTypes, String include, String startDate, String endDate, String xGustoAPIVersion, final ApiCallback<List<PayrollMinimal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForCompanyValidateBeforeCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<PayrollMinimal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForCompanyRequestBuilder {
        private final String companyId;
        private String processingStatuses;
        private String payrollTypes;
        private String include;
        private String startDate;
        private String endDate;
        private String xGustoAPIVersion;

        private GetAllForCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set processingStatuses
         * @param processingStatuses Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. &#x60;?processing_statuses&#x3D;processed,unprocessed&#x60; (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder processingStatuses(String processingStatuses) {
            this.processingStatuses = processingStatuses;
            return this;
        }
        
        /**
         * Set payrollTypes
         * @param payrollTypes Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. &#x60;?payroll_types&#x3D;regular,off_cycle&#x60; (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder payrollTypes(String payrollTypes) {
            this.payrollTypes = payrollTypes;
            return this;
        }
        
        /**
         * Set include
         * @param include Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;totals,payroll_status_meta&#x60; (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Return payrolls whose pay period is after the start date (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Return payrolls whose pay period is before the end date (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllForCompanyRequestBuilder
         */
        public GetAllForCompanyRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllForCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForCompanyCall(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllForCompany request
         * @return List&lt;PayrollMinimal&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<PayrollMinimal> execute() throws ApiException {
            ApiResponse<List<PayrollMinimal>> localVarResp = getAllForCompanyWithHttpInfo(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayrollMinimal&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayrollMinimal>> executeWithHttpInfo() throws ApiException {
            return getAllForCompanyWithHttpInfo(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion);
        }

        /**
         * Execute getAllForCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayrollMinimal>> _callback) throws ApiException {
            return getAllForCompanyAsync(companyId, processingStatuses, payrollTypes, include, startDate, endDate, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all payrolls for a company
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can&#39;t be more than 1 year apart.  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAllForCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForCompanyRequestBuilder getAllForCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllForCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call getSinglePayrollCall(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePayrollValidateBeforeCall(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSinglePayroll(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling getSinglePayroll(Async)");
        }

        return getSinglePayrollCall(companyId, payrollId, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Payroll> getSinglePayrollWithHttpInfo(String companyId, String payrollId, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSinglePayrollValidateBeforeCall(companyId, payrollId, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePayrollAsync(String companyId, String payrollId, String include, String xGustoAPIVersion, final ApiCallback<Payroll> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePayrollValidateBeforeCall(companyId, payrollId, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Payroll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePayrollRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String include;
        private String xGustoAPIVersion;

        private GetSinglePayrollRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set include
         * @param include Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;benefits,deductions,taxes&#x60; (optional)
         * @return GetSinglePayrollRequestBuilder
         */
        public GetSinglePayrollRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSinglePayrollRequestBuilder
         */
        public GetSinglePayrollRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSinglePayroll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePayrollCall(companyId, payrollId, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSinglePayroll request
         * @return Payroll
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Payroll execute() throws ApiException {
            ApiResponse<Payroll> localVarResp = getSinglePayrollWithHttpInfo(companyId, payrollId, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePayroll request with HTTP info returned
         * @return ApiResponse&lt;Payroll&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Payroll> executeWithHttpInfo() throws ApiException {
            return getSinglePayrollWithHttpInfo(companyId, payrollId, include, xGustoAPIVersion);
        }

        /**
         * Execute getSinglePayroll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Payroll> _callback) throws ApiException {
            return getSinglePayrollAsync(companyId, payrollId, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a single payroll
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the &#x60;employee_benefits:read:phi&#x60; scope  scope: &#x60;payrolls:read&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return GetSinglePayrollRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePayrollRequestBuilder getSinglePayroll(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new GetSinglePayrollRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call prepareForUpdateCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}/prepare"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prepareForUpdateValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling prepareForUpdate(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling prepareForUpdate(Async)");
        }

        return prepareForUpdateCall(companyId, payrollId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<PayrollPrepared> prepareForUpdateWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = prepareForUpdateValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call prepareForUpdateAsync(String companyId, String payrollId, String xGustoAPIVersion, final ApiCallback<PayrollPrepared> _callback) throws ApiException {

        okhttp3.Call localVarCall = prepareForUpdateValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PrepareForUpdateRequestBuilder {
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private PrepareForUpdateRequestBuilder(String companyId, String payrollId) {
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return PrepareForUpdateRequestBuilder
         */
        public PrepareForUpdateRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for prepareForUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return prepareForUpdateCall(companyId, payrollId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute prepareForUpdate request
         * @return PayrollPrepared
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollPrepared execute() throws ApiException {
            ApiResponse<PayrollPrepared> localVarResp = prepareForUpdateWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute prepareForUpdate request with HTTP info returned
         * @return ApiResponse&lt;PayrollPrepared&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollPrepared> executeWithHttpInfo() throws ApiException {
            return prepareForUpdateWithHttpInfo(companyId, payrollId, xGustoAPIVersion);
        }

        /**
         * Execute prepareForUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollPrepared> _callback) throws ApiException {
            return prepareForUpdateAsync(companyId, payrollId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Prepare a payroll for update
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.  Notes:  * Will null out calculated_at &amp; totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return PrepareForUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public PrepareForUpdateRequestBuilder prepareForUpdate(String companyId, String payrollId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new PrepareForUpdateRequestBuilder(companyId, payrollId);
    }
    private okhttp3.Call updateByIdCall(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdateByIdRequest payrollsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payrollsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/payrolls/{payroll_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "payroll_id" + "}", localVarApiClient.escapeString(payrollId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdateByIdRequest payrollsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateById(Async)");
        }

        // verify the required parameter 'payrollId' is set
        if (payrollId == null) {
            throw new ApiException("Missing the required parameter 'payrollId' when calling updateById(Async)");
        }

        return updateByIdCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest, _callback);

    }


    private ApiResponse<PayrollPrepared> updateByIdWithHttpInfo(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdateByIdRequest payrollsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String companyId, String payrollId, String xGustoAPIVersion, PayrollsUpdateByIdRequest payrollsUpdateByIdRequest, final ApiCallback<PayrollPrepared> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<PayrollPrepared>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final List<PayrollsUpdateByIdRequestEmployeeCompensationsInner> employeeCompensations;
        private final String companyId;
        private final String payrollId;
        private String xGustoAPIVersion;

        private UpdateByIdRequestBuilder(List<PayrollsUpdateByIdRequestEmployeeCompensationsInner> employeeCompensations, String companyId, String payrollId) {
            this.employeeCompensations = employeeCompensations;
            this.companyId = companyId;
            this.payrollId = payrollId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayrollsUpdateByIdRequest payrollsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest, _callback);
        }

        private PayrollsUpdateByIdRequest buildBodyParams() {
            PayrollsUpdateByIdRequest payrollsUpdateByIdRequest = new PayrollsUpdateByIdRequest();
            payrollsUpdateByIdRequest.employeeCompensations(this.employeeCompensations);
            return payrollsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return PayrollPrepared
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public PayrollPrepared execute() throws ApiException {
            PayrollsUpdateByIdRequest payrollsUpdateByIdRequest = buildBodyParams();
            ApiResponse<PayrollPrepared> localVarResp = updateByIdWithHttpInfo(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;PayrollPrepared&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayrollPrepared> executeWithHttpInfo() throws ApiException {
            PayrollsUpdateByIdRequest payrollsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayrollPrepared> _callback) throws ApiException {
            PayrollsUpdateByIdRequest payrollsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(companyId, payrollId, xGustoAPIVersion, payrollsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update a payroll by ID
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: &#x60;payrolls:write&#x60;
     * @param companyId The UUID of the company (required)
     * @param payrollId The UUID of the payroll (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prepared payroll </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(List<PayrollsUpdateByIdRequestEmployeeCompensationsInner> employeeCompensations, String companyId, String payrollId) throws IllegalArgumentException {
        if (employeeCompensations == null) throw new IllegalArgumentException("\"employeeCompensations\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (payrollId == null) throw new IllegalArgumentException("\"payrollId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(employeeCompensations, companyId, payrollId);
    }
}
