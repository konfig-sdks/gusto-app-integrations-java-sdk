/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest;
import com.konfigthis.client.model.EmployeesGetCustomFieldsResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeRequest;
import com.konfigthis.client.model.TimeOffActivity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmployeeCall(String companyId, String xGustoAPIVersion, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesCreateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/employees"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeValidateBeforeCall(String companyId, String xGustoAPIVersion, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createEmployee(Async)");
        }

        return createEmployeeCall(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest, _callback);

    }


    private ApiResponse<Employee> createEmployeeWithHttpInfo(String companyId, String xGustoAPIVersion, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeAsync(String companyId, String xGustoAPIVersion, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String companyId;
        private String middleInitial;
        private String dateOfBirth;
        private String email;
        private String ssn;
        private Boolean selfOnboarding;
        private String xGustoAPIVersion;

        private CreateEmployeeRequestBuilder(String firstName, String lastName, String companyId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.companyId = companyId;
        }

        /**
         * Set middleInitial
         * @param middleInitial  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set selfOnboarding
         * @param selfOnboarding If true, employee is expected to self-onboard. If false, payroll admin is expected to enter in the employee&#39;s onboarding information (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder selfOnboarding(Boolean selfOnboarding) {
            this.selfOnboarding = selfOnboarding;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeCall(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest, _callback);
        }

        private EmployeesCreateEmployeeRequest buildBodyParams() {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = new EmployeesCreateEmployeeRequest();
            employeesCreateEmployeeRequest.firstName(this.firstName);
            employeesCreateEmployeeRequest.middleInitial(this.middleInitial);
            employeesCreateEmployeeRequest.lastName(this.lastName);
            employeesCreateEmployeeRequest.dateOfBirth(this.dateOfBirth);
            employeesCreateEmployeeRequest.email(this.email);
            employeesCreateEmployeeRequest.ssn(this.ssn);
            employeesCreateEmployeeRequest.selfOnboarding(this.selfOnboarding);
            return employeesCreateEmployeeRequest;
        }

        /**
         * Execute createEmployee request
         * @return Employee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Employee execute() throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            ApiResponse<Employee> localVarResp = createEmployeeWithHttpInfo(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployee request with HTTP info returned
         * @return ApiResponse&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employee> executeWithHttpInfo() throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeWithHttpInfo(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest);
        }

        /**
         * Execute createEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employee> _callback) throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeAsync(companyId, xGustoAPIVersion, employeesCreateEmployeeRequest, _callback);
        }
    }

    /**
     * Create an employee
     * Create an employee.  scope: &#x60;employees:manage&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeRequestBuilder createEmployee(String firstName, String lastName, String companyId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateEmployeeRequestBuilder(firstName, lastName, companyId);
    }
    private okhttp3.Call deleteOnboardingEmployeeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOnboardingEmployeeValidateBeforeCall(String employeeId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteOnboardingEmployee(Async)");
        }

        return deleteOnboardingEmployeeCall(employeeId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> deleteOnboardingEmployeeWithHttpInfo(String employeeId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteOnboardingEmployeeValidateBeforeCall(employeeId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOnboardingEmployeeAsync(String employeeId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOnboardingEmployeeValidateBeforeCall(employeeId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOnboardingEmployeeRequestBuilder {
        private final String employeeId;
        private String xGustoAPIVersion;

        private DeleteOnboardingEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return DeleteOnboardingEmployeeRequestBuilder
         */
        public DeleteOnboardingEmployeeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for deleteOnboardingEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOnboardingEmployeeCall(employeeId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute deleteOnboardingEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOnboardingEmployeeWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute deleteOnboardingEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOnboardingEmployeeWithHttpInfo(employeeId, xGustoAPIVersion);
        }

        /**
         * Execute deleteOnboardingEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOnboardingEmployeeAsync(employeeId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete an onboarding employee
     * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: &#x60;employees:manage&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return DeleteOnboardingEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOnboardingEmployeeRequestBuilder deleteOnboardingEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new DeleteOnboardingEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call getCompanyEmployeesCall(String companyId, Boolean terminated, String include, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/employees"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (terminated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terminated", terminated));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyEmployeesValidateBeforeCall(String companyId, Boolean terminated, String include, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompanyEmployees(Async)");
        }

        return getCompanyEmployeesCall(companyId, terminated, include, page, per, xGustoAPIVersion, body, _callback);

    }


    private ApiResponse<List<Employee>> getCompanyEmployeesWithHttpInfo(String companyId, Boolean terminated, String include, Double page, Double per, String xGustoAPIVersion, Object body) throws ApiException {
        okhttp3.Call localVarCall = getCompanyEmployeesValidateBeforeCall(companyId, terminated, include, page, per, xGustoAPIVersion, body, null);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyEmployeesAsync(String companyId, Boolean terminated, String include, Double page, Double per, String xGustoAPIVersion, Object body, final ApiCallback<List<Employee>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyEmployeesValidateBeforeCall(companyId, terminated, include, page, per, xGustoAPIVersion, body, _callback);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyEmployeesRequestBuilder {
        private final String companyId;
        private Boolean terminated;
        private String include;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetCompanyEmployeesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set terminated
         * @param terminated Filters employees by the provided boolean (optional)
         * @return GetCompanyEmployeesRequestBuilder
         */
        public GetCompanyEmployeesRequestBuilder terminated(Boolean terminated) {
            this.terminated = terminated;
            return this;
        }
        
        /**
         * Set include
         * @param include Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees&#39; custom fields (optional)
         * @return GetCompanyEmployeesRequestBuilder
         */
        public GetCompanyEmployeesRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetCompanyEmployeesRequestBuilder
         */
        public GetCompanyEmployeesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetCompanyEmployeesRequestBuilder
         */
        public GetCompanyEmployeesRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCompanyEmployeesRequestBuilder
         */
        public GetCompanyEmployeesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCompanyEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return getCompanyEmployeesCall(companyId, terminated, include, page, per, xGustoAPIVersion, body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute getCompanyEmployees request
         * @return List&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Employee> execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<List<Employee>> localVarResp = getCompanyEmployeesWithHttpInfo(companyId, terminated, include, page, per, xGustoAPIVersion, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyEmployees request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Employee&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Employee>> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return getCompanyEmployeesWithHttpInfo(companyId, terminated, include, page, per, xGustoAPIVersion, body);
        }

        /**
         * Execute getCompanyEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Employee>> _callback) throws ApiException {
            Object body = buildBodyParams();
            return getCompanyEmployeesAsync(companyId, terminated, include, page, per, xGustoAPIVersion, body, _callback);
        }
    }

    /**
     * Get employees of a company
     * Get all of the employees, onboarding, active and terminated, for a given company.  scope: &#x60;employees:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetCompanyEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyEmployeesRequestBuilder getCompanyEmployees(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetCompanyEmployeesRequestBuilder(companyId);
    }
    private okhttp3.Call getCustomFieldsCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}/custom_fields"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(employeeId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<EmployeesGetCustomFieldsResponse> getCustomFieldsWithHttpInfo(String employeeId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<EmployeesGetCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(String employeeId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<EmployeesGetCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(employeeId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final String employeeId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetCustomFieldsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetCustomFieldsRequestBuilder
         */
        public GetCustomFieldsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(employeeId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return EmployeesGetCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetCustomFieldsResponse execute() throws ApiException {
            ApiResponse<EmployeesGetCustomFieldsResponse> localVarResp = getCustomFieldsWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(employeeId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetCustomFieldsResponse> _callback) throws ApiException {
            return getCustomFieldsAsync(employeeId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee&#39;s custom fields
     * Returns a list of the employee&#39;s custom fields.  scope: &#x60;employees:read&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetCustomFieldsRequestBuilder(employeeId);
    }
    private okhttp3.Call getDetailsCall(String employeeId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String employeeId, String include, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getDetails(Async)");
        }

        return getDetailsCall(employeeId, include, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Employee> getDetailsWithHttpInfo(String employeeId, String include, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(employeeId, include, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String employeeId, String include, String xGustoAPIVersion, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(employeeId, include, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String employeeId;
        private String include;
        private String xGustoAPIVersion;

        private GetDetailsRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees&#39; custom fields (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder include(String include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(employeeId, include, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getDetails request
         * @return Employee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Employee execute() throws ApiException {
            ApiResponse<Employee> localVarResp = getDetailsWithHttpInfo(employeeId, include, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employee> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(employeeId, include, xGustoAPIVersion);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employee> _callback) throws ApiException {
            return getDetailsAsync(employeeId, include, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get an employee
     * Get an employee.  scope: &#x60;employees:read&#x60; 
     * @param employeeId The UUID of the employee (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetDetailsRequestBuilder(employeeId);
    }
    private okhttp3.Call getTimeOffActivitiesCall(String employeeUuid, String timeOffType, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_uuid}/time_off_activities"
            .replace("{" + "employee_uuid" + "}", localVarApiClient.escapeString(employeeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeOffType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_off_type", timeOffType));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffActivitiesValidateBeforeCall(String employeeUuid, String timeOffType, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeUuid' is set
        if (employeeUuid == null) {
            throw new ApiException("Missing the required parameter 'employeeUuid' when calling getTimeOffActivities(Async)");
        }

        // verify the required parameter 'timeOffType' is set
        if (timeOffType == null) {
            throw new ApiException("Missing the required parameter 'timeOffType' when calling getTimeOffActivities(Async)");
        }

        return getTimeOffActivitiesCall(employeeUuid, timeOffType, xGustoAPIVersion, _callback);

    }


    private ApiResponse<TimeOffActivity> getTimeOffActivitiesWithHttpInfo(String employeeUuid, String timeOffType, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffActivitiesValidateBeforeCall(employeeUuid, timeOffType, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<TimeOffActivity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffActivitiesAsync(String employeeUuid, String timeOffType, String xGustoAPIVersion, final ApiCallback<TimeOffActivity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffActivitiesValidateBeforeCall(employeeUuid, timeOffType, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<TimeOffActivity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffActivitiesRequestBuilder {
        private final String employeeUuid;
        private final String timeOffType;
        private String xGustoAPIVersion;

        private GetTimeOffActivitiesRequestBuilder(String employeeUuid, String timeOffType) {
            this.employeeUuid = employeeUuid;
            this.timeOffType = timeOffType;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetTimeOffActivitiesRequestBuilder
         */
        public GetTimeOffActivitiesRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getTimeOffActivities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffActivitiesCall(employeeUuid, timeOffType, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getTimeOffActivities request
         * @return TimeOffActivity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffActivity execute() throws ApiException {
            ApiResponse<TimeOffActivity> localVarResp = getTimeOffActivitiesWithHttpInfo(employeeUuid, timeOffType, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffActivities request with HTTP info returned
         * @return ApiResponse&lt;TimeOffActivity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffActivity> executeWithHttpInfo() throws ApiException {
            return getTimeOffActivitiesWithHttpInfo(employeeUuid, timeOffType, xGustoAPIVersion);
        }

        /**
         * Execute getTimeOffActivities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffActivity> _callback) throws ApiException {
            return getTimeOffActivitiesAsync(employeeUuid, timeOffType, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get employee time off activities
     * Get employee time off activities.  scope: &#x60;employee_time_off_activities:read&#x60;
     * @param employeeUuid The UUID of the employee (required)
     * @param timeOffType The time off type name you want to query data for. ex: &#39;sick&#39; or &#39;vacation&#39; (required)
     * @return GetTimeOffActivitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffActivitiesRequestBuilder getTimeOffActivities(String employeeUuid, String timeOffType) throws IllegalArgumentException {
        if (employeeUuid == null) throw new IllegalArgumentException("\"employeeUuid\" is required but got null");
            

        if (timeOffType == null) throw new IllegalArgumentException("\"timeOffType\" is required but got null");
            

        return new GetTimeOffActivitiesRequestBuilder(employeeUuid, timeOffType);
    }
    private okhttp3.Call updateEmployeeCall(String employeeId, String xGustoAPIVersion, EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/v1/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeValidateBeforeCall(String employeeId, String xGustoAPIVersion, EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployee(Async)");
        }

        return updateEmployeeCall(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest, _callback);

    }


    private ApiResponse<Employee> updateEmployeeWithHttpInfo(String employeeId, String xGustoAPIVersion, EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeAsync(String employeeId, String xGustoAPIVersion, EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeValidateBeforeCall(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeRequestBuilder {
        private final String version;
        private final String employeeId;
        private String firstName;
        private String middleInitial;
        private String lastName;
        private String dateOfBirth;
        private String email;
        private String ssn;
        private Boolean twoPercentShareholder;
        private String xGustoAPIVersion;

        private UpdateEmployeeRequestBuilder(String version, String employeeId) {
            this.version = version;
            this.employeeId = employeeId;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn  (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set twoPercentShareholder
         * @param twoPercentShareholder Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type. (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder twoPercentShareholder(Boolean twoPercentShareholder) {
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateEmployeeRequestBuilder
         */
        public UpdateEmployeeRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest = buildBodyParams();
            return updateEmployeeCall(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest, _callback);
        }

        private EmployeesUpdateEmployeeRequest buildBodyParams() {
            EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest = new EmployeesUpdateEmployeeRequest();
            employeesUpdateEmployeeRequest.version(this.version);
            employeesUpdateEmployeeRequest.firstName(this.firstName);
            employeesUpdateEmployeeRequest.middleInitial(this.middleInitial);
            employeesUpdateEmployeeRequest.lastName(this.lastName);
            employeesUpdateEmployeeRequest.dateOfBirth(this.dateOfBirth);
            employeesUpdateEmployeeRequest.email(this.email);
            employeesUpdateEmployeeRequest.ssn(this.ssn);
            employeesUpdateEmployeeRequest.twoPercentShareholder(this.twoPercentShareholder);
            return employeesUpdateEmployeeRequest;
        }

        /**
         * Execute updateEmployee request
         * @return Employee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Employee execute() throws ApiException {
            EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest = buildBodyParams();
            ApiResponse<Employee> localVarResp = updateEmployeeWithHttpInfo(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployee request with HTTP info returned
         * @return ApiResponse&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employee> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest = buildBodyParams();
            return updateEmployeeWithHttpInfo(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest);
        }

        /**
         * Execute updateEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employee> _callback) throws ApiException {
            EmployeesUpdateEmployeeRequest employeesUpdateEmployeeRequest = buildBodyParams();
            return updateEmployeeAsync(employeeId, xGustoAPIVersion, employeesUpdateEmployeeRequest, _callback);
        }
    }

    /**
     * Update an employee
     * Update an employee.  scope: &#x60;employees:write&#x60;
     * @param employeeId The UUID of the employee (required)
     * @return UpdateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeRequestBuilder updateEmployee(String version, String employeeId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateEmployeeRequestBuilder(version, employeeId);
    }
}
