/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Contractor;
import com.konfigthis.client.model.ContractorsCreateIndividualOrBusinessRequest;
import com.konfigthis.client.model.ContractorsUpdateContractorRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIndividualOrBusinessCall(String companyId, String xGustoAPIVersion, ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsCreateIndividualOrBusinessRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractors"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIndividualOrBusinessValidateBeforeCall(String companyId, String xGustoAPIVersion, ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createIndividualOrBusiness(Async)");
        }

        return createIndividualOrBusinessCall(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest, _callback);

    }


    private ApiResponse<Contractor> createIndividualOrBusinessWithHttpInfo(String companyId, String xGustoAPIVersion, ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest) throws ApiException {
        okhttp3.Call localVarCall = createIndividualOrBusinessValidateBeforeCall(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIndividualOrBusinessAsync(String companyId, String xGustoAPIVersion, ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIndividualOrBusinessValidateBeforeCall(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIndividualOrBusinessRequestBuilder {
        private final String companyId;
        private String type;
        private String wageType;
        private String startDate;
        private String hourlyRate;
        private Boolean selfOnboarding;
        private String email;
        private String firstName;
        private String lastName;
        private String middleInitial;
        private Boolean fileNewHireReport;
        private String workState;
        private String ssn;
        private String businessName;
        private String ein;
        private Boolean isActive;
        private String xGustoAPIVersion;
        private ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest;

        private CreateIndividualOrBusinessRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set contractorsCreateIndividualOrBusinessRequest
         * @param contractorsCreateIndividualOrBusinessRequest Create an individual or business contractor. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder contractorsCreateIndividualOrBusinessRequest(ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest) {
            this.contractorsCreateIndividualOrBusinessRequest = contractorsCreateIndividualOrBusinessRequest;
            return this;
        }

        /**
         * Set type
         * @param type The contractor type. (optional, default to Individual)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set wageType
         * @param wageType The contractor’s wage type.  (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder wageType(String wageType) {
            this.wageType = wageType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The day when the contractor will start working for the company.  (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set hourlyRate
         * @param hourlyRate The contractor’s hourly rate. This attribute is required if the wage_type is &#x60;Hourly&#x60;. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder hourlyRate(String hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }
        
        /**
         * Set selfOnboarding
         * @param selfOnboarding Whether the contractor or the payroll admin will complete onboarding in Gusto. Self-onboarding is recommended so that contractors receive Gusto accounts. If self_onboarding is true, then email is required. (optional, default to false)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder selfOnboarding(Boolean selfOnboarding) {
            this.selfOnboarding = selfOnboarding;
            return this;
        }
        
        /**
         * Set email
         * @param email The contractor’s email address. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The contractor’s first name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The contractor’s last name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial The contractor’s middle initial. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set fileNewHireReport
         * @param fileNewHireReport The boolean flag indicating whether Gusto will file a new hire report for the contractor. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional, default to false)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder fileNewHireReport(Boolean fileNewHireReport) {
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }
        
        /**
         * Set workState
         * @param workState State where the contractor will be conducting the majority of their work for the company. This value is used when generating the new hire report. This attribute is required for &#x60;Individual&#x60; contractors if &#x60;file_new_hire_report&#x60; is true and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder workState(String workState) {
            this.workState = workState;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. Social security number is needed to file the annual 1099 tax form. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The name of the contractor business. This attribute is required for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set ein
         * @param ein The employer identification number of the contractor business. This attribute is optional for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder ein(String ein) {
            this.ein = ein;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The status of the contractor. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateIndividualOrBusinessRequestBuilder
         */
        public CreateIndividualOrBusinessRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createIndividualOrBusiness
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest = buildBodyParams();
            return createIndividualOrBusinessCall(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest, _callback);
        }

        private ContractorsCreateIndividualOrBusinessRequest buildBodyParams() {
            return this.contractorsCreateIndividualOrBusinessRequest;
        }

        /**
         * Execute createIndividualOrBusiness request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest = buildBodyParams();
            ApiResponse<Contractor> localVarResp = createIndividualOrBusinessWithHttpInfo(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIndividualOrBusiness request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest = buildBodyParams();
            return createIndividualOrBusinessWithHttpInfo(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest);
        }

        /**
         * Execute createIndividualOrBusiness request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            ContractorsCreateIndividualOrBusinessRequest contractorsCreateIndividualOrBusinessRequest = buildBodyParams();
            return createIndividualOrBusinessAsync(companyId, xGustoAPIVersion, contractorsCreateIndividualOrBusinessRequest, _callback);
        }
    }

    /**
     * Create a contractor
     * Create an individual or business contractor.  scope: &#x60;contractors:manage&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateIndividualOrBusinessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateIndividualOrBusinessRequestBuilder createIndividualOrBusiness(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateIndividualOrBusinessRequestBuilder(companyId);
    }
    private okhttp3.Call getAllCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/contractors"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (per != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per", per));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAll(Async)");
        }

        return getAllCall(companyId, page, per, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<Contractor>> getAllWithHttpInfo(String companyId, Double page, Double per, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, page, per, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<Contractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String companyId, Double page, Double per, String xGustoAPIVersion, final ApiCallback<List<Contractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, page, per, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Contractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String companyId;
        private Double page;
        private Double per;
        private String xGustoAPIVersion;

        private GetAllRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set page
         * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set per
         * @param per Number of objects per page. For majority of endpoints will default to 25 (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder per(Double per) {
            this.per = per;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(companyId, page, per, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<Contractor> execute() throws ApiException {
            ApiResponse<List<Contractor>> localVarResp = getAllWithHttpInfo(companyId, page, per, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Contractor&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Contractor>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(companyId, page, per, xGustoAPIVersion);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Contractor>> _callback) throws ApiException {
            return getAllAsync(companyId, page, per, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get contractors of a company
     * Get all contractors, active and inactive, individual and business, for a company.  scope: &#x60;contractors:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllRequestBuilder(companyId);
    }
    private okhttp3.Call getDetailsCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_id}"
            .replace("{" + "contractor_id" + "}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String contractorId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling getDetails(Async)");
        }

        return getDetailsCall(contractorId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Contractor> getDetailsWithHttpInfo(String contractorId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(contractorId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String contractorId, String xGustoAPIVersion, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(contractorId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String contractorId;
        private String xGustoAPIVersion;

        private GetDetailsRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(contractorId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getDetails request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ApiResponse<Contractor> localVarResp = getDetailsWithHttpInfo(contractorId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(contractorId, xGustoAPIVersion);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            return getDetailsAsync(contractorId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a contractor
     * Get a contractor.  scope: &#x60;contractors:read&#x60;
     * @param contractorId The UUID of the contractor (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new GetDetailsRequestBuilder(contractorId);
    }
    private okhttp3.Call updateContractorCall(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractorsUpdateContractorRequest;

        // create path and map variables
        String localVarPath = "/v1/contractors/{contractor_id}"
            .replace("{" + "contractor_id" + "}", localVarApiClient.escapeString(contractorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContractorValidateBeforeCall(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractorId' is set
        if (contractorId == null) {
            throw new ApiException("Missing the required parameter 'contractorId' when calling updateContractor(Async)");
        }

        return updateContractorCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);

    }


    private ApiResponse<Contractor> updateContractorWithHttpInfo(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest) throws ApiException {
        okhttp3.Call localVarCall = updateContractorValidateBeforeCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, null);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContractorAsync(String contractorId, String xGustoAPIVersion, ContractorsUpdateContractorRequest contractorsUpdateContractorRequest, final ApiCallback<Contractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContractorValidateBeforeCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        Type localVarReturnType = new TypeToken<Contractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContractorRequestBuilder {
        private final String contractorId;
        private String version;
        private String type;
        private String wageType;
        private String startDate;
        private String hourlyRate;
        private Boolean selfOnboarding;
        private String email;
        private String firstName;
        private String lastName;
        private String middleInitial;
        private Boolean fileNewHireReport;
        private String workState;
        private String ssn;
        private String businessName;
        private String ein;
        private Boolean isActive;
        private String xGustoAPIVersion;

        private UpdateContractorRequestBuilder(String contractorId) {
            this.contractorId = contractorId;
        }

        /**
         * Set version
         * @param version The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set type
         * @param type The contractor type. (optional, default to Individual)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set wageType
         * @param wageType The contractor’s wage type.  (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder wageType(String wageType) {
            this.wageType = wageType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The day when the contractor will start working for the company.  (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set hourlyRate
         * @param hourlyRate The contractor’s hourly rate. This attribute is required if the wage_type is &#x60;Hourly&#x60;. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder hourlyRate(String hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }
        
        /**
         * Set selfOnboarding
         * @param selfOnboarding Whether the contractor or the payroll admin will complete onboarding in Gusto. Self-onboarding is recommended so that contractors receive Gusto accounts. If self_onboarding is true, then email is required. (optional, default to false)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder selfOnboarding(Boolean selfOnboarding) {
            this.selfOnboarding = selfOnboarding;
            return this;
        }
        
        /**
         * Set email
         * @param email The contractor’s email address. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The contractor’s first name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The contractor’s last name. This attribute is required for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleInitial
         * @param middleInitial The contractor’s middle initial. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder middleInitial(String middleInitial) {
            this.middleInitial = middleInitial;
            return this;
        }
        
        /**
         * Set fileNewHireReport
         * @param fileNewHireReport The boolean flag indicating whether Gusto will file a new hire report for the contractor. This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. (optional, default to false)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder fileNewHireReport(Boolean fileNewHireReport) {
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }
        
        /**
         * Set workState
         * @param workState State where the contractor will be conducting the majority of their work for the company. This value is used when generating the new hire report. This attribute is required for &#x60;Individual&#x60; contractors if &#x60;file_new_hire_report&#x60; is true and will be ignored for &#x60;Business&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder workState(String workState) {
            this.workState = workState;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn This attribute is optional for &#x60;Individual&#x60; contractors and will be ignored for &#x60;Business&#x60; contractors. Social security number is needed to file the annual 1099 tax form. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The name of the contractor business. This attribute is required for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set ein
         * @param ein The employer identification number of the contractor business. This attribute is optional for &#x60;Business&#x60; contractors and will be ignored for &#x60;Individual&#x60; contractors. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder ein(String ein) {
            this.ein = ein;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The status of the contractor. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateContractorRequestBuilder
         */
        public UpdateContractorRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateContractor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorCall(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        }

        private ContractorsUpdateContractorRequest buildBodyParams() {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = new ContractorsUpdateContractorRequest();
            return contractorsUpdateContractorRequest;
        }

        /**
         * Execute updateContractor request
         * @return Contractor
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public Contractor execute() throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            ApiResponse<Contractor> localVarResp = updateContractorWithHttpInfo(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContractor request with HTTP info returned
         * @return ApiResponse&lt;Contractor&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contractor> executeWithHttpInfo() throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorWithHttpInfo(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest);
        }

        /**
         * Execute updateContractor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contractor> _callback) throws ApiException {
            ContractorsUpdateContractorRequest contractorsUpdateContractorRequest = buildBodyParams();
            return updateContractorAsync(contractorId, xGustoAPIVersion, contractorsUpdateContractorRequest, _callback);
        }
    }

    /**
     * Update a contractor
     * Update a contractor.  scope: &#x60;contractors:write&#x60;  &gt; 🚧 Warning &gt; &gt; Watch out when changing a contractor&#39;s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @param contractorId The UUID of the contractor (required)
     * @return UpdateContractorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContractorRequestBuilder updateContractor(String contractorId) throws IllegalArgumentException {
        if (contractorId == null) throw new IllegalArgumentException("\"contractorId\" is required but got null");
            

        return new UpdateContractorRequestBuilder(contractorId);
    }
}
