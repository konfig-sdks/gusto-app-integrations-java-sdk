/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BenefitSummary;
import com.konfigthis.client.model.BenefitTypeRequirements;
import com.konfigthis.client.model.CompanyBenefit;
import com.konfigthis.client.model.CompanyBenefitWithEmployeeBenefits;
import com.konfigthis.client.model.CompanyBenefitsCreateCompanyBenefitRequest;
import com.konfigthis.client.model.CompanyBenefitsUpdateBenefitRequest;
import com.konfigthis.client.model.SupportedBenefit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompanyBenefitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyBenefitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyBenefitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCompanyBenefitCall(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyBenefitsCreateCompanyBenefitRequest;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/company_benefits"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyBenefitValidateBeforeCall(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCompanyBenefit(Async)");
        }

        return createCompanyBenefitCall(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest, _callback);

    }


    private ApiResponse<CompanyBenefit> createCompanyBenefitWithHttpInfo(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = createCompanyBenefitValidateBeforeCall(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompanyBenefitAsync(String companyId, String xGustoAPIVersion, CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest, final ApiCallback<CompanyBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyBenefitValidateBeforeCall(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompanyBenefitRequestBuilder {
        private final String description;
        private final String companyId;
        private Double benefitType;
        private Boolean active;
        private Boolean responsibleForEmployerTaxes;
        private Boolean responsibleForEmployeeW2;
        private String xGustoAPIVersion;

        private CreateCompanyBenefitRequestBuilder(String description, String companyId) {
            this.description = description;
            this.companyId = companyId;
        }

        /**
         * Set benefitType
         * @param benefitType The ID of the benefit to which the company benefit belongs. (optional)
         * @return CreateCompanyBenefitRequestBuilder
         */
        public CreateCompanyBenefitRequestBuilder benefitType(Double benefitType) {
            this.benefitType = benefitType;
            return this;
        }
        
        /**
         * Set active
         * @param active Whether this benefit is active for employee participation. (optional, default to true)
         * @return CreateCompanyBenefitRequestBuilder
         */
        public CreateCompanyBenefitRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set responsibleForEmployerTaxes
         * @param responsibleForEmployerTaxes Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits. (optional)
         * @return CreateCompanyBenefitRequestBuilder
         */
        public CreateCompanyBenefitRequestBuilder responsibleForEmployerTaxes(Boolean responsibleForEmployerTaxes) {
            this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
            return this;
        }
        
        /**
         * Set responsibleForEmployeeW2
         * @param responsibleForEmployeeW2 Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits. (optional)
         * @return CreateCompanyBenefitRequestBuilder
         */
        public CreateCompanyBenefitRequestBuilder responsibleForEmployeeW2(Boolean responsibleForEmployeeW2) {
            this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return CreateCompanyBenefitRequestBuilder
         */
        public CreateCompanyBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for createCompanyBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest = buildBodyParams();
            return createCompanyBenefitCall(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest, _callback);
        }

        private CompanyBenefitsCreateCompanyBenefitRequest buildBodyParams() {
            CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest = new CompanyBenefitsCreateCompanyBenefitRequest();
            companyBenefitsCreateCompanyBenefitRequest.description(this.description);
            companyBenefitsCreateCompanyBenefitRequest.benefitType(this.benefitType);
            companyBenefitsCreateCompanyBenefitRequest.active(this.active);
            companyBenefitsCreateCompanyBenefitRequest.responsibleForEmployerTaxes(this.responsibleForEmployerTaxes);
            companyBenefitsCreateCompanyBenefitRequest.responsibleForEmployeeW2(this.responsibleForEmployeeW2);
            return companyBenefitsCreateCompanyBenefitRequest;
        }

        /**
         * Execute createCompanyBenefit request
         * @return CompanyBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefit execute() throws ApiException {
            CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefit> localVarResp = createCompanyBenefitWithHttpInfo(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompanyBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefit> executeWithHttpInfo() throws ApiException {
            CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest = buildBodyParams();
            return createCompanyBenefitWithHttpInfo(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest);
        }

        /**
         * Execute createCompanyBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefit> _callback) throws ApiException {
            CompanyBenefitsCreateCompanyBenefitRequest companyBenefitsCreateCompanyBenefitRequest = buildBodyParams();
            return createCompanyBenefitAsync(companyId, xGustoAPIVersion, companyBenefitsCreateCompanyBenefitRequest, _callback);
        }
    }

    /**
     * Create a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     * @param companyId The UUID of the company (required)
     * @return CreateCompanyBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyBenefitRequestBuilder createCompanyBenefit(String description, String companyId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new CreateCompanyBenefitRequestBuilder(description, companyId);
    }
    private okhttp3.Call getAllSupportedBenefitsCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSupportedBenefitsValidateBeforeCall(String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        return getAllSupportedBenefitsCall(xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<SupportedBenefit>> getAllSupportedBenefitsWithHttpInfo(String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllSupportedBenefitsValidateBeforeCall(xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<SupportedBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSupportedBenefitsAsync(String xGustoAPIVersion, final ApiCallback<List<SupportedBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSupportedBenefitsValidateBeforeCall(xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<SupportedBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSupportedBenefitsRequestBuilder {
        private String xGustoAPIVersion;

        private GetAllSupportedBenefitsRequestBuilder() {
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetAllSupportedBenefitsRequestBuilder
         */
        public GetAllSupportedBenefitsRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getAllSupportedBenefits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSupportedBenefitsCall(xGustoAPIVersion, _callback);
        }


        /**
         * Execute getAllSupportedBenefits request
         * @return List&lt;SupportedBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<SupportedBenefit> execute() throws ApiException {
            ApiResponse<List<SupportedBenefit>> localVarResp = getAllSupportedBenefitsWithHttpInfo(xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSupportedBenefits request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SupportedBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SupportedBenefit>> executeWithHttpInfo() throws ApiException {
            return getAllSupportedBenefitsWithHttpInfo(xGustoAPIVersion);
        }

        /**
         * Execute getAllSupportedBenefits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SupportedBenefit>> _callback) throws ApiException {
            return getAllSupportedBenefitsAsync(xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get all benefits supported by Gusto
     * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     * @return GetAllSupportedBenefitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSupportedBenefitsRequestBuilder getAllSupportedBenefits() throws IllegalArgumentException {
        return new GetAllSupportedBenefitsRequestBuilder();
    }
    private okhttp3.Call getByCompanyIdCall(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}/company_benefits"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enrollmentCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrollment_count", enrollmentCount));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCompanyIdValidateBeforeCall(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getByCompanyId(Async)");
        }

        return getByCompanyIdCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);

    }


    private ApiResponse<List<CompanyBenefit>> getByCompanyIdWithHttpInfo(String companyId, Boolean enrollmentCount, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByCompanyIdValidateBeforeCall(companyId, enrollmentCount, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<List<CompanyBenefit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCompanyIdAsync(String companyId, Boolean enrollmentCount, String xGustoAPIVersion, final ApiCallback<List<CompanyBenefit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCompanyIdValidateBeforeCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CompanyBenefit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCompanyIdRequestBuilder {
        private final String companyId;
        private Boolean enrollmentCount;
        private String xGustoAPIVersion;

        private GetByCompanyIdRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set enrollmentCount
         * @param enrollmentCount Whether to return employee enrollment count (optional)
         * @return GetByCompanyIdRequestBuilder
         */
        public GetByCompanyIdRequestBuilder enrollmentCount(Boolean enrollmentCount) {
            this.enrollmentCount = enrollmentCount;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByCompanyIdRequestBuilder
         */
        public GetByCompanyIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getByCompanyId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCompanyIdCall(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getByCompanyId request
         * @return List&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public List<CompanyBenefit> execute() throws ApiException {
            ApiResponse<List<CompanyBenefit>> localVarResp = getByCompanyIdWithHttpInfo(companyId, enrollmentCount, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCompanyId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CompanyBenefit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CompanyBenefit>> executeWithHttpInfo() throws ApiException {
            return getByCompanyIdWithHttpInfo(companyId, enrollmentCount, xGustoAPIVersion);
        }

        /**
         * Execute getByCompanyId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CompanyBenefit>> _callback) throws ApiException {
            return getByCompanyIdAsync(companyId, enrollmentCount, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get benefits for a company
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     * @param companyId The UUID of the company (required)
     * @return GetByCompanyIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByCompanyIdRequestBuilder getByCompanyId(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetByCompanyIdRequestBuilder(companyId);
    }
    private okhttp3.Call getByIdCall(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withEmployeeBenefits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_employee_benefits", withEmployeeBenefits));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling getById(Async)");
        }

        return getByIdCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);

    }


    private ApiResponse<CompanyBenefitWithEmployeeBenefits> getByIdWithHttpInfo(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<CompanyBenefitWithEmployeeBenefits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String companyBenefitId, Boolean withEmployeeBenefits, String xGustoAPIVersion, final ApiCallback<CompanyBenefitWithEmployeeBenefits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefitWithEmployeeBenefits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String companyBenefitId;
        private Boolean withEmployeeBenefits;
        private String xGustoAPIVersion;

        private GetByIdRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set withEmployeeBenefits
         * @param withEmployeeBenefits Whether to return employee benefits associated with the benefit (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder withEmployeeBenefits(Boolean withEmployeeBenefits) {
            this.withEmployeeBenefits = withEmployeeBenefits;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getById request
         * @return CompanyBenefitWithEmployeeBenefits
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefitWithEmployeeBenefits execute() throws ApiException {
            ApiResponse<CompanyBenefitWithEmployeeBenefits> localVarResp = getByIdWithHttpInfo(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefitWithEmployeeBenefits&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefitWithEmployeeBenefits> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefitWithEmployeeBenefits> _callback) throws ApiException {
            return getByIdAsync(companyBenefitId, withEmployeeBenefits, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: &#x60;company_benefits:read&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new GetByIdRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call getFieldsRequirementsByIdCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits/{benefit_id}/requirements"
            .replace("{" + "benefit_id" + "}", localVarApiClient.escapeString(benefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsRequirementsByIdValidateBeforeCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'benefitId' is set
        if (benefitId == null) {
            throw new ApiException("Missing the required parameter 'benefitId' when calling getFieldsRequirementsById(Async)");
        }

        return getFieldsRequirementsByIdCall(benefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<BenefitTypeRequirements> getFieldsRequirementsByIdWithHttpInfo(String benefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getFieldsRequirementsByIdValidateBeforeCall(benefitId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<BenefitTypeRequirements>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldsRequirementsByIdAsync(String benefitId, String xGustoAPIVersion, final ApiCallback<BenefitTypeRequirements> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsRequirementsByIdValidateBeforeCall(benefitId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<BenefitTypeRequirements>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldsRequirementsByIdRequestBuilder {
        private final String benefitId;
        private String xGustoAPIVersion;

        private GetFieldsRequirementsByIdRequestBuilder(String benefitId) {
            this.benefitId = benefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetFieldsRequirementsByIdRequestBuilder
         */
        public GetFieldsRequirementsByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getFieldsRequirementsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldsRequirementsByIdCall(benefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getFieldsRequirementsById request
         * @return BenefitTypeRequirements
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public BenefitTypeRequirements execute() throws ApiException {
            ApiResponse<BenefitTypeRequirements> localVarResp = getFieldsRequirementsByIdWithHttpInfo(benefitId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFieldsRequirementsById request with HTTP info returned
         * @return ApiResponse&lt;BenefitTypeRequirements&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BenefitTypeRequirements> executeWithHttpInfo() throws ApiException {
            return getFieldsRequirementsByIdWithHttpInfo(benefitId, xGustoAPIVersion);
        }

        /**
         * Execute getFieldsRequirementsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BenefitTypeRequirements> _callback) throws ApiException {
            return getFieldsRequirementsByIdAsync(benefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get benefit fields requirements by ID
     * Returns field requirements for the requested benefit type.  scope: &#x60;benefits:read&#x60;
     * @param benefitId The benefit type in Gusto. (required)
     * @return GetFieldsRequirementsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Benefit type requirements response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldsRequirementsByIdRequestBuilder getFieldsRequirementsById(String benefitId) throws IllegalArgumentException {
        if (benefitId == null) throw new IllegalArgumentException("\"benefitId\" is required but got null");
            

        return new GetFieldsRequirementsByIdRequestBuilder(benefitId);
    }
    private okhttp3.Call getSummaryByIdCall(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}/summary"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryByIdValidateBeforeCall(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling getSummaryById(Async)");
        }

        return getSummaryByIdCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);

    }


    private ApiResponse<BenefitSummary> getSummaryByIdWithHttpInfo(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSummaryByIdValidateBeforeCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<BenefitSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryByIdAsync(String companyBenefitId, String startDate, String endDate, Boolean detailed, String xGustoAPIVersion, final ApiCallback<BenefitSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryByIdValidateBeforeCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<BenefitSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryByIdRequestBuilder {
        private final String companyBenefitId;
        private String startDate;
        private String endDate;
        private Boolean detailed;
        private String xGustoAPIVersion;

        private GetSummaryByIdRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set startDate
         * @param startDate The start date for which to retrieve company benefit summary (optional)
         * @return GetSummaryByIdRequestBuilder
         */
        public GetSummaryByIdRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date for which to retrieve company benefit summary (optional)
         * @return GetSummaryByIdRequestBuilder
         */
        public GetSummaryByIdRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set detailed
         * @param detailed Display employee payroll item summary (optional)
         * @return GetSummaryByIdRequestBuilder
         */
        public GetSummaryByIdRequestBuilder detailed(Boolean detailed) {
            this.detailed = detailed;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSummaryByIdRequestBuilder
         */
        public GetSummaryByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSummaryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryByIdCall(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSummaryById request
         * @return BenefitSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public BenefitSummary execute() throws ApiException {
            ApiResponse<BenefitSummary> localVarResp = getSummaryByIdWithHttpInfo(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummaryById request with HTTP info returned
         * @return ApiResponse&lt;BenefitSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BenefitSummary> executeWithHttpInfo() throws ApiException {
            return getSummaryByIdWithHttpInfo(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion);
        }

        /**
         * Execute getSummaryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BenefitSummary> _callback) throws ApiException {
            return getSummaryByIdAsync(companyBenefitId, startDate, endDate, detailed, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get company benefit summary by company benefit id.
     * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the &#x60;company_benefits:read:phi&#x60; scope.  scope: &#x60;company_benefits:read&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return GetSummaryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Benefit summary response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryByIdRequestBuilder getSummaryById(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new GetSummaryByIdRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call getSupportedBenefitByIdCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/benefits/{benefit_id}"
            .replace("{" + "benefit_id" + "}", localVarApiClient.escapeString(benefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupportedBenefitByIdValidateBeforeCall(String benefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'benefitId' is set
        if (benefitId == null) {
            throw new ApiException("Missing the required parameter 'benefitId' when calling getSupportedBenefitById(Async)");
        }

        return getSupportedBenefitByIdCall(benefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<SupportedBenefit> getSupportedBenefitByIdWithHttpInfo(String benefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = getSupportedBenefitByIdValidateBeforeCall(benefitId, xGustoAPIVersion, null);
        Type localVarReturnType = new TypeToken<SupportedBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSupportedBenefitByIdAsync(String benefitId, String xGustoAPIVersion, final ApiCallback<SupportedBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupportedBenefitByIdValidateBeforeCall(benefitId, xGustoAPIVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportedBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSupportedBenefitByIdRequestBuilder {
        private final String benefitId;
        private String xGustoAPIVersion;

        private GetSupportedBenefitByIdRequestBuilder(String benefitId) {
            this.benefitId = benefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return GetSupportedBenefitByIdRequestBuilder
         */
        public GetSupportedBenefitByIdRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for getSupportedBenefitById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSupportedBenefitByIdCall(benefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute getSupportedBenefitById request
         * @return SupportedBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public SupportedBenefit execute() throws ApiException {
            ApiResponse<SupportedBenefit> localVarResp = getSupportedBenefitByIdWithHttpInfo(benefitId, xGustoAPIVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSupportedBenefitById request with HTTP info returned
         * @return ApiResponse&lt;SupportedBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SupportedBenefit> executeWithHttpInfo() throws ApiException {
            return getSupportedBenefitByIdWithHttpInfo(benefitId, xGustoAPIVersion);
        }

        /**
         * Execute getSupportedBenefitById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SupportedBenefit> _callback) throws ApiException {
            return getSupportedBenefitByIdAsync(benefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Get a supported benefit by ID
     * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: &#x60;benefits:read&#x60;
     * @param benefitId The benefit type in Gusto. (required)
     * @return GetSupportedBenefitByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported benefit response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public GetSupportedBenefitByIdRequestBuilder getSupportedBenefitById(String benefitId) throws IllegalArgumentException {
        if (benefitId == null) throw new IllegalArgumentException("\"benefitId\" is required but got null");
            

        return new GetSupportedBenefitByIdRequestBuilder(benefitId);
    }
    private okhttp3.Call removeBenefitCall(String companyBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBenefitValidateBeforeCall(String companyBenefitId, String xGustoAPIVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling removeBenefit(Async)");
        }

        return removeBenefitCall(companyBenefitId, xGustoAPIVersion, _callback);

    }


    private ApiResponse<Void> removeBenefitWithHttpInfo(String companyBenefitId, String xGustoAPIVersion) throws ApiException {
        okhttp3.Call localVarCall = removeBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeBenefitAsync(String companyBenefitId, String xGustoAPIVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveBenefitRequestBuilder {
        private final String companyBenefitId;
        private String xGustoAPIVersion;

        private RemoveBenefitRequestBuilder(String companyBenefitId) {
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return RemoveBenefitRequestBuilder
         */
        public RemoveBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for removeBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeBenefitCall(companyBenefitId, xGustoAPIVersion, _callback);
        }


        /**
         * Execute removeBenefit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute removeBenefit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion);
        }

        /**
         * Execute removeBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeBenefitAsync(companyBenefitId, xGustoAPIVersion, _callback);
        }
    }

    /**
     * Delete a company benefit
     * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be &#39;External&#39;)  scope: &#x60;company_benefits:write&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return RemoveBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBenefitRequestBuilder removeBenefit(String companyBenefitId) throws IllegalArgumentException {
        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new RemoveBenefitRequestBuilder(companyBenefitId);
    }
    private okhttp3.Call updateBenefitCall(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyBenefitsUpdateBenefitRequest;

        // create path and map variables
        String localVarPath = "/v1/company_benefits/{company_benefit_id}"
            .replace("{" + "company_benefit_id" + "}", localVarApiClient.escapeString(companyBenefitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xGustoAPIVersion != null) {
            localVarHeaderParams.put("X-Gusto-API-Version", localVarApiClient.parameterToString(xGustoAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBenefitValidateBeforeCall(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyBenefitId' is set
        if (companyBenefitId == null) {
            throw new ApiException("Missing the required parameter 'companyBenefitId' when calling updateBenefit(Async)");
        }

        return updateBenefitCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);

    }


    private ApiResponse<CompanyBenefit> updateBenefitWithHttpInfo(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, null);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBenefitAsync(String companyBenefitId, String xGustoAPIVersion, CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest, final ApiCallback<CompanyBenefit> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBenefitValidateBeforeCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyBenefit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBenefitRequestBuilder {
        private final String version;
        private final String companyBenefitId;
        private String description;
        private Boolean active;
        private String xGustoAPIVersion;

        private UpdateBenefitRequestBuilder(String version, String companyBenefitId) {
            this.version = version;
            this.companyBenefitId = companyBenefitId;
        }

        /**
         * Set description
         * @param description The description of the company benefit.For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set active
         * @param active Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set xGustoAPIVersion
         * @param xGustoAPIVersion Determines the date-based API version associated with your API call. If none is provided, your application&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used. (optional)
         * @return UpdateBenefitRequestBuilder
         */
        public UpdateBenefitRequestBuilder xGustoAPIVersion(String xGustoAPIVersion) {
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        /**
         * Build call for updateBenefit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitCall(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        }

        private CompanyBenefitsUpdateBenefitRequest buildBodyParams() {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = new CompanyBenefitsUpdateBenefitRequest();
            companyBenefitsUpdateBenefitRequest.description(this.description);
            companyBenefitsUpdateBenefitRequest.version(this.version);
            companyBenefitsUpdateBenefitRequest.active(this.active);
            return companyBenefitsUpdateBenefitRequest;
        }

        /**
         * Execute updateBenefit request
         * @return CompanyBenefit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyBenefit execute() throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            ApiResponse<CompanyBenefit> localVarResp = updateBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBenefit request with HTTP info returned
         * @return ApiResponse&lt;CompanyBenefit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyBenefit> executeWithHttpInfo() throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitWithHttpInfo(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest);
        }

        /**
         * Execute updateBenefit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyBenefit> _callback) throws ApiException {
            CompanyBenefitsUpdateBenefitRequest companyBenefitsUpdateBenefitRequest = buildBodyParams();
            return updateBenefitAsync(companyBenefitId, xGustoAPIVersion, companyBenefitsUpdateBenefitRequest, _callback);
        }
    }

    /**
     * Update a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: &#x60;company_benefits:write&#x60;
     * @param companyBenefitId The UUID of the company benefit (required)
     * @return UpdateBenefitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found     The requested resource does not exist. Make sure the provided ID/UUID is valid.  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBenefitRequestBuilder updateBenefit(String version, String companyBenefitId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (companyBenefitId == null) throw new IllegalArgumentException("\"companyBenefitId\" is required but got null");
            

        return new UpdateBenefitRequestBuilder(version, companyBenefitId);
    }
}
