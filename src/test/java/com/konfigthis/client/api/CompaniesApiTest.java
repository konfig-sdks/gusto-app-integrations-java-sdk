/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompaniesCreateCompanyRequest;
import com.konfigthis.client.model.CompaniesCreateCompanyRequestCompany;
import com.konfigthis.client.model.CompaniesCreateCompanyRequestUser;
import com.konfigthis.client.model.CompaniesCreateCompanyResponse;
import com.konfigthis.client.model.CompaniesGetCustomFieldsResponse;
import com.konfigthis.client.model.Company;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompaniesApi
 */
@Disabled
public class CompaniesApiTest {

    private static CompaniesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompaniesApi(apiClient);
    }

    /**
     * Create a company
     *
     * ### Overview The company provisioning API provides a way to create a Gusto company as part of your integration. When you successfully call the API, the API does the following: * Creates a new company in Gusto. * Creates a new user in Gusto. * Makes the new user the primary payroll administrator of the new company. * Sends a welcome email to the new user. In the response, you will receive an account claim URL. Redirect the user to this URL to complete their account setup inside of Gusto  &gt; ðŸ“˜ Token Authentication &gt; &gt; This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompanyTest() throws ApiException {
        CompaniesCreateCompanyRequestUser user = null;
        CompaniesCreateCompanyRequestCompany company = null;
        String xGustoAPIVersion = null;
        CompaniesCreateCompanyResponse response = api.createCompany(user, company)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a company
     *
     * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyInfoTest() throws ApiException {
        String companyId = null;
        String xGustoAPIVersion = null;
        Company response = api.getCompanyInfo(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the custom fields of a company
     *
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: &#x60;companies:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        CompaniesGetCustomFieldsResponse response = api.getCustomFields(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
