/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Payroll;
import com.konfigthis.client.model.PayrollMinimal;
import com.konfigthis.client.model.PayrollPrepared;
import com.konfigthis.client.model.PayrollsUpdateByIdRequest;
import com.konfigthis.client.model.PayrollsUpdateByIdRequestEmployeeCompensationsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayrollsApi
 */
@Disabled
public class PayrollsApiTest {

    private static PayrollsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayrollsApi(apiClient);
    }

    /**
     * Get all payrolls for a company
     *
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can&#39;t be more than 1 year apart.  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForCompanyTest() throws ApiException {
        String companyId = null;
        String processingStatuses = null;
        String payrollTypes = null;
        String include = null;
        String startDate = null;
        String endDate = null;
        String xGustoAPIVersion = null;
        List<PayrollMinimal> response = api.getAllForCompany(companyId)
                .processingStatuses(processingStatuses)
                .payrollTypes(payrollTypes)
                .include(include)
                .startDate(startDate)
                .endDate(endDate)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single payroll
     *
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the &#x60;employee_benefits:read:phi&#x60; scope  scope: &#x60;payrolls:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSinglePayrollTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String include = null;
        String xGustoAPIVersion = null;
        Payroll response = api.getSinglePayroll(companyId, payrollId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Prepare a payroll for update
     *
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.  Notes:  * Will null out calculated_at &amp; totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepareForUpdateTest() throws ApiException {
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        PayrollPrepared response = api.prepareForUpdate(companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a payroll by ID
     *
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: &#x60;payrolls:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        List<PayrollsUpdateByIdRequestEmployeeCompensationsInner> employeeCompensations = null;
        String companyId = null;
        String payrollId = null;
        String xGustoAPIVersion = null;
        PayrollPrepared response = api.updateById(employeeCompensations, companyId, payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
