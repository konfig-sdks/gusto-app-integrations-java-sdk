/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Contractor;
import com.konfigthis.client.model.ContractorsCreateIndividualOrBusinessRequest;
import com.konfigthis.client.model.ContractorsUpdateContractorRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContractorsApi
 */
@Disabled
public class ContractorsApiTest {

    private static ContractorsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContractorsApi(apiClient);
    }

    /**
     * Create a contractor
     *
     * Create an individual or business contractor.  scope: &#x60;contractors:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIndividualOrBusinessTest() throws ApiException {
        String companyId = null;
        String type = null;
        String wageType = null;
        String startDate = null;
        String hourlyRate = null;
        Boolean selfOnboarding = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String middleInitial = null;
        Boolean fileNewHireReport = null;
        String workState = null;
        String ssn = null;
        String businessName = null;
        String ein = null;
        Boolean isActive = null;
        String xGustoAPIVersion = null;
        Contractor response = api.createIndividualOrBusiness(companyId)
                .type(type)
                .wageType(wageType)
                .startDate(startDate)
                .hourlyRate(hourlyRate)
                .selfOnboarding(selfOnboarding)
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .middleInitial(middleInitial)
                .fileNewHireReport(fileNewHireReport)
                .workState(workState)
                .ssn(ssn)
                .businessName(businessName)
                .ein(ein)
                .isActive(isActive)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get contractors of a company
     *
     * Get all contractors, active and inactive, individual and business, for a company.  scope: &#x60;contractors:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String companyId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Contractor> response = api.getAll(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a contractor
     *
     * Get a contractor.  scope: &#x60;contractors:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String contractorId = null;
        String xGustoAPIVersion = null;
        Contractor response = api.getDetails(contractorId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a contractor
     *
     * Update a contractor.  scope: &#x60;contractors:write&#x60;  &gt; ðŸš§ Warning &gt; &gt; Watch out when changing a contractor&#39;s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto wonâ€™t recognize and file two separate 1099s if they simply change from business to individual
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContractorTest() throws ApiException {
        String contractorId = null;
        String version = null;
        String type = null;
        String wageType = null;
        String startDate = null;
        String hourlyRate = null;
        Boolean selfOnboarding = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String middleInitial = null;
        Boolean fileNewHireReport = null;
        String workState = null;
        String ssn = null;
        String businessName = null;
        String ein = null;
        Boolean isActive = null;
        String xGustoAPIVersion = null;
        Contractor response = api.updateContractor(contractorId)
                .version(version)
                .type(type)
                .wageType(wageType)
                .startDate(startDate)
                .hourlyRate(hourlyRate)
                .selfOnboarding(selfOnboarding)
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .middleInitial(middleInitial)
                .fileNewHireReport(fileNewHireReport)
                .workState(workState)
                .ssn(ssn)
                .businessName(businessName)
                .ein(ein)
                .isActive(isActive)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
