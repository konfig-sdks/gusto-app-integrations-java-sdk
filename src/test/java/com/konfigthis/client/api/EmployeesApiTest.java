/*
 * Gusto API
 * Welcome to Gusto's Embedded Payroll API documentation!
 *
 * The version of the OpenAPI document: 2024-03-01
 * Contact: developer@gusto.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest;
import com.konfigthis.client.model.EmployeesGetCustomFieldsResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeRequest;
import com.konfigthis.client.model.TimeOffActivity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Create an employee
     *
     * Create an employee.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String companyId = null;
        String middleInitial = null;
        String dateOfBirth = null;
        String email = null;
        String ssn = null;
        Boolean selfOnboarding = null;
        String xGustoAPIVersion = null;
        Employee response = api.createEmployee(firstName, lastName, companyId)
                .middleInitial(middleInitial)
                .dateOfBirth(dateOfBirth)
                .email(email)
                .ssn(ssn)
                .selfOnboarding(selfOnboarding)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an onboarding employee
     *
     * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: &#x60;employees:manage&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOnboardingEmployeeTest() throws ApiException {
        String employeeId = null;
        String xGustoAPIVersion = null;
        api.deleteOnboardingEmployee(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employees of a company
     *
     * Get all of the employees, onboarding, active and terminated, for a given company.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyEmployeesTest() throws ApiException {
        String companyId = null;
        Boolean terminated = null;
        String include = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        List<Employee> response = api.getCompanyEmployees(companyId)
                .terminated(terminated)
                .include(include)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee&#39;s custom fields
     *
     * Returns a list of the employee&#39;s custom fields.  scope: &#x60;employees:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        String employeeId = null;
        Double page = null;
        Double per = null;
        String xGustoAPIVersion = null;
        EmployeesGetCustomFieldsResponse response = api.getCustomFields(employeeId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an employee
     *
     * Get an employee.  scope: &#x60;employees:read&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String employeeId = null;
        String include = null;
        String xGustoAPIVersion = null;
        Employee response = api.getDetails(employeeId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employee time off activities
     *
     * Get employee time off activities.  scope: &#x60;employee_time_off_activities:read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffActivitiesTest() throws ApiException {
        String employeeUuid = null;
        String timeOffType = null;
        String xGustoAPIVersion = null;
        TimeOffActivity response = api.getTimeOffActivities(employeeUuid, timeOffType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee
     *
     * Update an employee.  scope: &#x60;employees:write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeTest() throws ApiException {
        String version = null;
        String employeeId = null;
        String firstName = null;
        String middleInitial = null;
        String lastName = null;
        String dateOfBirth = null;
        String email = null;
        String ssn = null;
        Boolean twoPercentShareholder = null;
        String xGustoAPIVersion = null;
        Employee response = api.updateEmployee(version, employeeId)
                .firstName(firstName)
                .middleInitial(middleInitial)
                .lastName(lastName)
                .dateOfBirth(dateOfBirth)
                .email(email)
                .ssn(ssn)
                .twoPercentShareholder(twoPercentShareholder)
                .xGustoAPIVersion(xGustoAPIVersion)
                .execute();
        // TODO: test validations
    }

}
